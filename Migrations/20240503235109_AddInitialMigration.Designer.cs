// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xsoft.Data;

#nullable disable

namespace xsoft.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240503235109_AddInitialMigration")]
    partial class AddInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConfigurationUser", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConfigurationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ConfigurationUsers", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("Rolesid")
                        .HasColumnType("int");

                    b.Property<int>("permissionsid")
                        .HasColumnType("int");

                    b.HasKey("Rolesid", "permissionsid");

                    b.HasIndex("permissionsid");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("xsoft.Admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordhash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("id");

                    b.ToTable("Admins", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("xsoft.OverridedPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("configurationId")
                        .HasColumnType("int");

                    b.Property<bool>("isGranted")
                        .HasColumnType("bit");

                    b.Property<int>("permissionId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("configurationId");

                    b.HasIndex("permissionId");

                    b.HasIndex("userId");

                    b.ToTable("OverridedPermissions");
                });

            modelBuilder.Entity("xsoft.Permission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("xsoft.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("xsoft.models.Configuration", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("database")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dbHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dbPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dbUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ownerId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ownerId")
                        .IsUnique();

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("xsoft.User", b =>
                {
                    b.HasBaseType("xsoft.Admin");

                    b.Property<DateTime>("expirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("maxCollaborators")
                        .HasColumnType("int");

                    b.Property<string>("organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.HasIndex("roleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ConfigurationUser", b =>
                {
                    b.HasOne("xsoft.models.Configuration", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xsoft.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("xsoft.Role", null)
                        .WithMany()
                        .HasForeignKey("Rolesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xsoft.Permission", null)
                        .WithMany()
                        .HasForeignKey("permissionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xsoft.OverridedPermission", b =>
                {
                    b.HasOne("xsoft.models.Configuration", "configuration")
                        .WithMany()
                        .HasForeignKey("configurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xsoft.Permission", "permission")
                        .WithMany()
                        .HasForeignKey("permissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xsoft.User", "user")
                        .WithMany("userPermissions")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("configuration");

                    b.Navigation("permission");

                    b.Navigation("user");
                });

            modelBuilder.Entity("xsoft.models.Configuration", b =>
                {
                    b.HasOne("xsoft.User", "owner")
                        .WithOne("OwnedConfiguration")
                        .HasForeignKey("xsoft.models.Configuration", "ownerId");

                    b.Navigation("owner");
                });

            modelBuilder.Entity("xsoft.User", b =>
                {
                    b.HasOne("xsoft.Admin", null)
                        .WithOne()
                        .HasForeignKey("xsoft.User", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xsoft.Role", "role")
                        .WithMany("Users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("xsoft.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("xsoft.User", b =>
                {
                    b.Navigation("OwnedConfiguration")
                        .IsRequired();

                    b.Navigation("userPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
