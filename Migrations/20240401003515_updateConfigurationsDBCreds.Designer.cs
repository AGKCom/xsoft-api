// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xsoft.Data;

#nullable disable

namespace xsoft.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240401003515_updateConfigurationsDBCreds")]
    partial class updateConfigurationsDBCreds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("xsoft.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expirationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordhash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("xsoft.models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("database")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dbHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dbPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dbUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("xsoft.models.UserConfiguration", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ConfigurationId");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("UserConfiguration");
                });

            modelBuilder.Entity("xsoft.models.UserConfiguration", b =>
                {
                    b.HasOne("xsoft.models.Configuration", "Configuration")
                        .WithMany("UserConfigurations")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xsoft.User", "User")
                        .WithMany("UserConfigurations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("xsoft.User", b =>
                {
                    b.Navigation("UserConfigurations");
                });

            modelBuilder.Entity("xsoft.models.Configuration", b =>
                {
                    b.Navigation("UserConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
